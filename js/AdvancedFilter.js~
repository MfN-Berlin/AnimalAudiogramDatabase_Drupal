$( function() {
    $( "#species_filter" ).selectmenu();
});

class Filter {

    /**
     * @param api instance of API_Client
     */
    constructor(api) {
        this.api = api;
    }
    
    /**
     * Render the filters of the filter block.
     * Add the filter block (e.g. to the sidebar) in Structure -> Block Layout
     * Called from inside the browse-template.
     */
    render() {
        var filterEl = document.getElementById("filters");
        // var taxonFilterMarkup = this._renderFilterByTaxonJQ();
        var vernacularFilterMarkup = this._renderFilterByVernacularName();
        var methodFilterMarkup = this._renderFilterByMeasurementMethod();
        var publicationFilterMarkup = this._renderFilterByPublication();
        filterEl.innerHTML = `
            ${vernacularFilterMarkup}
            ${methodFilterMarkup}
            ${publicationFilterMarkup}
            <p>
                <div class="button main_button" id="display_button" onclick="filter.apply()">Apply filter</div>
                <div class="button" id="reset_button" onclick="filter.reset()">Clear filter</div>
            </p>
        `;
        $('#species_filter').css('font-style', 'italic');
    }

    /** Render species pulldown using JQuery, so that it can be rendered in italics */
    _renderFilterByTaxonJQ() {
        var taxa = this.api.list_species();
        var selectedOption = this._getSelectedOption('species');
        var options = "<option></option>";
        for (var t in taxa) {
            var selected = (selectedOption == taxa[t].ott_id)? "selected" : ""; 
            if (taxa[t].total != 0) { // taxa[t].total is the number of animals, not the numebr of experiments/audiograms
                options += `<option value="${taxa[t].ott_id}" ${selected}><i>${taxa[t].taxon_name}</i></option>`;
            }
        }
        var markup = `<label for="species_filter">By species</label><select id="species_filter" name="species_filter">${options}</select>`
        return markup;
    }

    _renderFilterByVernacularName() {
        var taxa = this.api.list_species_vernacular();
        var selectedOption = this._getSelectedOption('species');
        var options = "<option></option>";
        for (var t in taxa) {
            var selected = (selectedOption == taxa[t].ott_id)? "selected" : ""; 
            if (taxa[t].total != 0) { // taxa[t].total is the number of animals, not the numebr of experiments/audiograms
                options += `<option value="${taxa[t].ott_id}" ${selected}>${taxa[t].vernacular_name_english}</option>`;
            }
        }
        var markup = `<label for="vernacular_filter">By species</label><select id="vernacular_filter">${options}</select>`
        return markup;
    }
    
    _renderFilterByMeasurementMethod() {
        var methods = this.api.list_measurement_methods(); 
        var selectedOption = this._getSelectedOption('method');
        var options = "<option></option>";
        for (var m in methods) {
            var selected = (selectedOption == methods[m].method_id)? "selected" : ""; 
            options += `<option value="${methods[m].method_id}" ${selected}>${methods[m].method_name}</option>`;
        }
        // var markup = `<label for="method_filter">By measurement method</label><i>Hold down the control (ctrl) button to select multiple options</i><select id="method_filter" size="10" multiple>${options}</select>`
        var markup = `<label for="method_filter">By measurement method</label><select id="method_filter">${options}</select>`
        return markup;
    }
    
    _renderFilterByPublication() {
        var publications = this.api.list_publications();
        var selectedOption = this._getSelectedOption('publication');
        var options = "<option></option>";
        for (var p in publications) {
            var selected = (selectedOption == publications[p].id)? "selected" : "";
            var citation_short = this._encodStr(replace_special_chars(publications[p].citation_short));
            options += `<option value="${publications[p].id}" ${selected}>${citation_short}</option>`;
        }
        var markup = `<label for="publication_filter">By publication</label><select id="publication_filter">${options}</select>`
        return markup;
    }

    /** Read the GET parameters from the URL*/
    _getSelectedOption(paramName) {
        var temp = decodeURI(location.search.split(`${paramName}=`)[1]);
        return(temp.split('&')[0])
    }
    
    /**
     * Reset filters and page content by reloading the page.
     */
    reset() {
        this._reload();
    }

    /**
     * Apply filters by calling the API client and 
     * getting the filtered contents from the backend,
     * reload the page
     */
    apply() {
        var selectedSpecies = this._readSelectedSpecies().join(",");
        var methodFilterEl = document.getElementById("method_filter");
        if (methodFilterEl.selectedIndex != -1) {
            var selectedMethod = methodFilterEl.options[methodFilterEl.selectedIndex].value
        }
        var publicationFilterEl = document.getElementById("publication_filter");
        var selectedPublication = publicationFilterEl.options[publicationFilterEl.selectedIndex].value
        this._reload({'species': selectedSpecies, 'method': selectedMethod, 'publication': selectedPublication});
    }

    /** Read (multiple) selected species from pulldown */
    _readSelectedSpecies() {
        var resp = [];
        var speciesFilterEl = document.getElementById("vernacular_filter");
        var speciesOptions = speciesFilterEl.options;
        var selectedSpecies = speciesFilterEl.options[speciesFilterEl.selectedIndex].value
        for (var i = 0; i < speciesOptions.length; i++) {
            var opt = speciesOptions[i];
            if (opt.selected) {
                resp.push(opt.value);
            }
        }
        return resp;
    }
    
    _reload(search=null) {
        //var temp = decodeURI(location.search.split(`order_by=`)[1]);
        //var order_by = temp.split('&')[0]
        var order_by = 'vernacular_name_english'; // when applying filters, sort by species by default
        if (search) {
            if (search['method'] && !search['species']) {
                order_by = 'measurement_method'; // when filtering only by method, sort by method
            } else if (search['publication'] && !search['species']) {
                order_by = 'citation_short'; // when filtering only by publication, sort by publication
            }
        }
        var url = "/audiogrambase"
        if (order_by) {
            url += `?order_by=${order_by}`;
        }
        if (search) {
            url += `&species=${search['species']}&method=${search['method']}&publication=${search['publication']}`;
        }
        window.location.href=url;
    }
    
    _encodStr(rawStr) {
        return rawStr.replace(/[\u00A0-\u9999<>\&]/gim, function(i) {
            return '&#'+i.charCodeAt(0)+';';
        });
    }
}
